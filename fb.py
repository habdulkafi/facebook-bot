import mechanize
import bs4
import time
import re
import random
import json
import subprocess
import sys
import os
import traceback
import pdb

# SET-UP: loads tumblr links for the @science functionality
with open("tumblr_links.txt","rb") as f:
	links = f.read().split("\n")


# SET-UP: checks if the config file exists.  If it doesn't, prompts the user to run `setup.py`
if not os.path.isfile("config"):
	print "Please run `python setup.py` first"
	sys.exit()

# SET-UP: get credentials from config file (generated by setup.py)
execfile("config")

# SET-UP: setup permissions
if pref == "yes":
	allow = True
else:
	allow = False


# SET-UP: Pre-compile regular expressions for use later
regexyoutube = re.compile("@youtube.*")
regexmp3 = re.compile("@mp3.*")
regeximage= re.compile("@image.*")
regexsearch =re.compile("@search.*")

def login_setup():

	"""	-creates the browser object which with the correct cookie settings and user-agent (important)
		-logs in to facebook with the credentials provided from the config file 
		-finds the "thread id" of the facebook chat conversation the user wants to monitor.
		-creates the mobile browser used for some parts of the program"""
	try:
		browser = mechanize.Browser()
		browser.set_handle_robots(False)
		cookies = mechanize.CookieJar()
		browser.set_cookiejar(cookies)
		browser.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36')]
		browser.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)

		url = "https://m.facebook.com/"
		browser.open(url)
		browser.select_form(nr = 0)
		browser.form['email'] = email
		browser.form['pass'] = password
		response = browser.submit()

		m_page = browser.open("https://m.facebook.com/messages")
		m_soup = bs4.BeautifulSoup(m_page.read(), "html5lib")
		tid = m_soup(text=chatName)[0].parent.get('href')
		fbmsgurl = "https://m.facebook.com" + tid

		mbrowser = mechanize.Browser()
		mbrowser.set_handle_robots( False )
		mbrowser.addheaders = [('User-agent', 'Mozilla/5.0 (Linux; Android 5.0.2; HTC One_M8 Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.48 Mobile Safari/537.36')]
		return (browser,fbmsgurl,mbrowser)
	except:
		traceback.print_exc()
		print "Login Failed"
		return ('','')


def logout(browser):
	""" Logs out of Facebook """
	browser.open("https://m.facebook.com/")
	browser.follow_link(list(browser.links(text_regex = 'Logout'))[0])




def get_joke(browser):
	""" Goes to reddit.com/r/jokes and gets the top 25 jokes of the past day.
		Randomly selects one and returns the title and the body of the joke """
	try:
		jokes_fp = json.loads(browser.open('https://www.reddit.com/r/Jokes/top/.json').read())['data']['children']
		joke = random.choice(jokes_fp)
		joke_title = joke['data']['title']
		joke_url = joke['data']['url']
		joke_text = json.loads(browser.open(joke_url + '.json').read())[0]['data']['children'][0]['data']['selftext']
		return (joke_title.encode('ascii','ignore'), joke_text.encode('ascii','ignore'))
	except:
		traceback.print_exc()
		print "joke error"
		return ("","")



def google(search_string,brg):
	""" Does a google search of the provided query.  Uses a mobile user-agent. 
		Returns all 10 search results of the search """
	try:		
		brg.open( "http://google.com" )
		brg.select_form(nr=0)
		brg["q"]=search_string
		responseg = brg.submit()
		soupg = bs4.BeautifulSoup(responseg.read(), "html5lib")
		return [x.text + "\n" + x.find('a', href=True)['href'] for x in soupg.find_all("div",{"class":"g card-section"})]
	except:
		traceback.print_exc()
		print "google error"
		return ["" for _ in range(10)]

def google_image(search_string,brg):
	""" Does a google image search of the provided query.  Uses a mobile user-agent. 
		Returns links all the images on the first page of the results """
	try:
		brg.open( "http://www.images.google.com" )
		brg.select_form(nr=0)
		brg["q"]=search_string
		responseg = brg.submit()
		soupg = bs4.BeautifulSoup(responseg.read(), "html5lib")
		meta_data = [json.loads(x.text) for x in soupg.find_all("div",{"class":"rg_meta"})]
		return [x['ou'] for x in meta_data]
	except:
		traceback.print_exc()
		print "image error"
		return ["" for _ in range(10)]

def message(send_string,brf,fbmsgurl):
	""" Sends a message to the user with the given string
		Uses the provided browser object (brf) that must
		be logged in to the user's account """
	try:
		brf.open(fbmsgurl)
		brf.select_form(nr=1)
		brf["body"] = send_string
		brf.submit()
		return True
	except:
		traceback.print_exc()
		print "message error"
		return False

def main(browser,fbmsgurl,mbrowser):
	r = browser.open(fbmsgurl)
	soup = bs4.BeautifulSoup(r, "html5lib")
	a = list(list(soup.find_all("div",{"id":"messageGroup"})[0].children)[1].children)[-1]
	if "@search" in a.text:
		string = a(text=regexsearch)[0].parent.text.replace("@search ","")
		if string != "@search":
			print "google search: ", string
			b = google(string,mbrowser)[0:3]
			b.reverse()
			for ss in b:
				ss = ''.join([i if ord(i) < 128 else ' ' for i in ss])
				message(ss,browser,fbmsgurl)	
	elif "@image" in a.text:
		string = a(text=regeximage)[0].parent.text.replace("@image ","")
		if string != "@image":
			print "image search: ", string
			b = google_image(string,mbrowser)[0:3]
			for ss in b:
				message(ss,browser,fbmsgurl)
	elif "@science" in a.text:
		print "fake science"
		message(random.choice(links),browser,fbmsgurl)
	elif "@youtube" in a.text:
		string = a(text=regexyoutube)[0].parent.text.replace("@youtube ","").encode('ascii','ignore')
		if string != "@youtube" and (allow or a.find('strong').text == name):
			print "youtube download: ", string
			p = subprocess.Popen(['youtube-dl',"-f", "mp4", string],stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
			print p.stdout.read()
			message("Your video is being downloaded!",browser,fbmsgurl)
	elif "@mp3" in a.text:
		string = a(text=regexmp3)[0].parent.text.replace("@mp3 ","").encode('ascii','ignore')
		if string != "@mp3" and (allow or a.find('strong').text == name):
			print "mp3 download: ", string
			p = subprocess.Popen(['youtube-dl',"-x", "--audio-format", "mp3", string],stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
			print p.stdout.read()
			message("Your audio is being downloaded!",browser,fbmsgurl)
	elif "@help" in a.text:
		to_send = "Welcome to the Facebook chat companion!  This is the help page.\n" \
					"***To perform a Google search, send `@search <query>` and you'll get the top 3 results \n"\
					"***To perform a Google image search, send `@image <query>` and you'll get the top 3 results\n "\
					"***To get a random science fact, send `@science` \n" \
					"***To download a youtube video, send `@youtube <url>` \n" \
					"***To download an mp3 file from lots of websites (e.g. youtube, soundcloud), "\
					"***To get a joke from reddit, send `@joke`"\
					"send `@mp3 <url>` (not guaranteed to work)"
		message(to_send, browser,fbmsgurl)
		message("----end help----",browser,fbmsgurl)
		time.sleep(.5)
	elif "@joke" in a.text:
		print "joke"
		(joke_title,joke_text) = get_joke(mbrowser)
		message(joke_title, browser,fbmsgurl)
		message(joke_text, browser,fbmsgurl)

if __name__ == "__main__":
	if len(sys.argv)>1:
		if sys.argv[1] == 'debug':
			pdb.set_trace()

	print "logging in"
	(browser,fbmsgurl,mbrowser) = login_setup()
	print "logged in.  press ctrl+c to log out"
	while True:
		try:
			main(browser,fbmsgurl,mbrowser)
			time.sleep(.5)
		except KeyboardInterrupt:
			print "logging out"
			logout(browser)
			print "logged out"
			sys.exit()

